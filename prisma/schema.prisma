// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  password     String?
  emailVerified DateTime?
  image        String?

  // User preferences
  preferences Json?
  
  // Relations
  accounts     Account[]
  sessions     Session[]
  orders       Order[]
  cartItems    CartItem[]
  addresses    Address[]
  paymentMethods PaymentMethod[]
  quizResults  QuizResult[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  brand       String
  voltage     Float
  capacity    Float
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  sku         String   @unique
  images      String[]
  inStock     Boolean  @default(true)
  category    String
  specifications Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
  quizMatches QuizResult[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  shipping      Decimal     @db.Decimal(10, 2)
  discount      Decimal?    @db.Decimal(10, 2)
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  stripePaymentIntentId String?
  
  // Shipping
  shippingAddress Json
  billingAddress  Json
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String      @default("US")
  phone       String?
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model PaymentMethod {
  id               String    @id @default(cuid())
  userId           String
  stripePaymentMethodId String @unique
  type             String    // 'card', 'bank_account', etc.
  last4            String?
  brand            String?
  expiryMonth      Int?
  expiryYear       Int?
  isDefault        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model QuizResult {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String?  // For anonymous users
  answers     Json     // Store quiz answers
  recommendations Json // Store recommended products
  score       Int?
  createdAt   DateTime @default(now())

  user              User?     @relation(fields: [userId], references: [id])
  recommendedProducts Product[]

  @@map("quiz_results")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter")
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contact_forms")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}